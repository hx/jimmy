# frozen_string_literal: true

module Jimmy
  module Declaration
    FORMATS = Set.new(
      %w[
        date-time
        date
        time
        email
        idn-email
        hostname
        idn-hostname
        ipv4
        ipv6
        uri
        uri-reference
        iri
        iri-reference
        uri-template
        json-pointer
        relative-json-pointer
        regex
      ]
    ).freeze

    # Set the pattern for a string value.
    # @param [Regexp] expression The pattern for a string value. Cannot include
    #   any options such as +/i+.
    # @return [self] self, for chaining
    def pattern(expression)
      assert_regexp expression
      set(pattern: expression.source).string
    end

    FORMATS.each do |format|
      class_eval <<-RUBY, __FILE__, __LINE__ + 1
        def #{format.gsub '-', '_'}
          string.format '#{format}'
        end
      RUBY
    end

    # Generated by `rake yard`. Do not modify anything below here.
    #
    # @!method date_time()
    #   Validate a string with format "date-time".
    #   @return [Schema]
    # @!method date()
    #   Validate a string with format "date".
    #   @return [Schema]
    # @!method time()
    #   Validate a string with format "time".
    #   @return [Schema]
    # @!method email()
    #   Validate a string with format "email".
    #   @return [Schema]
    # @!method idn_email()
    #   Validate a string with format "idn-email".
    #   @return [Schema]
    # @!method hostname()
    #   Validate a string with format "hostname".
    #   @return [Schema]
    # @!method idn_hostname()
    #   Validate a string with format "idn-hostname".
    #   @return [Schema]
    # @!method ipv4()
    #   Validate a string with format "ipv4".
    #   @return [Schema]
    # @!method ipv6()
    #   Validate a string with format "ipv6".
    #   @return [Schema]
    # @!method uri()
    #   Validate a string with format "uri".
    #   @return [Schema]
    # @!method uri_reference()
    #   Validate a string with format "uri-reference".
    #   @return [Schema]
    # @!method iri()
    #   Validate a string with format "iri".
    #   @return [Schema]
    # @!method iri_reference()
    #   Validate a string with format "iri-reference".
    #   @return [Schema]
    # @!method uri_template()
    #   Validate a string with format "uri-template".
    #   @return [Schema]
    # @!method json_pointer()
    #   Validate a string with format "json-pointer".
    #   @return [Schema]
    # @!method relative_json_pointer()
    #   Validate a string with format "relative-json-pointer".
    #   @return [Schema]
    # @!method regex()
    #   Validate a string with format "regex".
    #   @return [Schema]
  end
end
